# Model convergence and label switching {#sec-convergence}

When employing Bayesian estimation procedures, it is crucial to ensure model convergence and address label switching issues. Model convergence refers to checking whether the algorithm reaches a consistent solution when different starting values are utilized (but conceptually similar ones). On the other hand, label switching occurs when the ordering of the states switches during the estimation iterations. For example, the state initially labeled as 1 may later become state 2.

To visually inspect model convergence and label switching, one can utilize **traceplots** of parameters from identical models with varying starting values. These traceplots display the sampled parameter values over the iterations and can be generated using the `traceplot` function. Below, we demonstrate how this is done using the 2-state models with different starting values.

```{r loading model convergence, include = FALSE}
# specifying general model properties
m <-2
n_dep <- 4
q_emiss <- c(3, 2, 3, 2)

# specifying different starting values
start_TM <- diag(.8, m)
start_TM[lower.tri(start_TM) | upper.tri(start_TM)] <- .2
start_EM_b <- list(matrix(c(0.2, 0.6, 0.2,
                            0.6, 0.2, 0.2), byrow = TRUE,
                        nrow = m, ncol = q_emiss[1]), # vocalizing patient
                 matrix(c(0.4, 0.6,
                          0.4, 0.6), byrow = TRUE, nrow = m,
                        ncol = q_emiss[2]), # looking patient
                 matrix(c(0.6, 0.2, 0.2,
                          0.2, 0.6, 0.2), byrow = TRUE,
                        nrow = m, ncol = q_emiss[3]), # vocalizing therapist
                 matrix(c(0.4, 0.6,
                          0.4, 0.6), byrow = TRUE, nrow = m,
                        ncol = q_emiss[4])) # looking therapist
```

```{r showing model convergence I, eval= FALSE}
# specifying general model properties
m <-2
n_dep <- 4
q_emiss <- c(3, 2, 3, 2)
# specifying different starting values
start_TM <- diag(.8, m)
start_TM[lower.tri(start_TM) | upper.tri(start_TM)] <- .2
start_EM_b <- list(matrix(c(0.2, 0.6, 0.2,
                            0.6, 0.2, 0.2), byrow = TRUE,
                        nrow = m, ncol = q_emiss[1]), # vocalizing patient
                 matrix(c(0.4, 0.6,
                          0.4, 0.6), byrow = TRUE, nrow = m,
                        ncol = q_emiss[2]), # looking patient
                 matrix(c(0.6, 0.2, 0.2,
                          0.2, 0.6, 0.2), byrow = TRUE,
                        nrow = m, ncol = q_emiss[3]), # vocalizing therapist
                 matrix(c(0.4, 0.6,
                          0.4, 0.6), byrow = TRUE, nrow = m,
                        ncol = q_emiss[4])) # looking therapist

# run a model identical to out_2st, but with different starting values:
set.seed(9843)
out_2st_b <- mHMM(s_data = nonverbal, 
                      gen = list(m = m, n_dep = n_dep, q_emiss = q_emiss), 
                      start_val = c(list(start_TM), start_EM),
                      mcmc = list(J = 1000, burn_in = 200))

```

If we, for example, want to inspect the traceplots for the transition probabilities, we can do the following:

```{r}
#| label: fig-traceplot_trans
#| fig-cap: "Traceplot of transition probabilities"

# two models with different starting values
L <- list(out_2st, out_2st_b)
traceplot(L)
```

If we want to inspect emission probabilities for looking behavior of the patient at the group level, we can use the following code:

```{r}
#| label: fig-traceplot_emiss
#| fig-cap: "Traceplot of emission probabilities"
traceplot(L, component = "emiss", dep = 2, dep_lab = "patient looking behavior", 
          cat_lab = c("not looking at therapist", "looking at therapist"), 
          col = brewer.pal(2, name = "Set2"))
```

::: callout-tip
## Arguments for `traceplot` function

`traceplot` creates the traceplot(s) for the group-level parameter estimates corresponding to a fitted multilevel hidden Markov model. It takes the following arguments:

-   `L`: list of objects of class `mHMM`.
-   `component`: string is used to specify whether the traceplot should be created for the parameter estimates of the transition probabilities `component = "gamma"` or the emission probabilities `component = "emiss"`. Default is `component = "gamma"`.
-   `dep`: integer specifying for which dependent variable the traceplot should be plotted. Only required if one wishes to plot the emission distribution probabilities.
-   `col`: optional vector of colors for the traceplot lines. The vector should have a length equal to the number of `mHMM` objects in the list `L`.
-   `cat_lab`: optional vector of strings denoting the labels of the categorical outcome values.
-   `dep_lab`: optional string when plotting for the emission probabilities, denoting the label for the dependent variable plotted.
-   `burn_in`: optional integer which specifies the number of iterations to discard.
:::

In the figures @fig-traceplot_trans and @fig-traceplot_emiss, we can observe that the parameter estimates converge to the same parameter space, indicating a stable estimation. Additionally, the chains appear to mix well, showing smooth and consistent movements throughout the iterations. Furthermore, there is no evidence of label switching. These are positive signs that the model has converged to a consistent solution.
