# Fitting the model {#sec-fitting}

The multilevel Hidden Markov Model (HMM) is fitted using the function `mHMM`. Below, we demonstrate how to fit a model without any covariates and with default priors.

```{r show fitting 2 state model, eval = FALSE}
# Run a model without covariate(s) and with default priors
set.seed(14532)
out_2st <- mHMM(s_data = nonverbal, 
                    gen = list(m = m, n_dep = n_dep, q_emiss = q_emiss), 
                    start_val = c(list(start_TM), start_EM),
                    mcmc = list(J = 1000, burn_in = 200))
```

The call to `mHMM` specifies the model with several arguments.

-   `s_data` argument specifies the input data used to infer the hidden states over time.

-   `gen` and `start_val` arguments specify the general model properties and the starting values, as discussed previously in @sec-modspec and @sec-startval.

-   The arguments needed for the MCMC algorithm are given in `mcmc`:

    -   `J` specifies the number of iterations used by the hybrid metropolis within Gibbs algorithm.
    -   `burn_in` specifies the number of iterations to discard when obtaining the model parameter summary statistics.

The function `mHMM` returns an object of class `mHMM`, and you can use the `print` and `summary` methods to view the results. The `print` method provides essential information about the fitted model, including the number of subjects in the dataset, the number of iterations performed, the burn-in period, the average log likelihood across all subjects, and model fit indices such as [AIC](https://en.wikipedia.org/wiki/Akaike_information_criterion). Additionally, it displays the number of states specified and the number of dependent variables used for modeling the states. The information displayed is as follow.

```{r show print model}
print(out_2st)
```

The `summary` method provides information on the estimated parameters. That is, the point estimates of the posterior distribution for the transition probability matrix and the emission distribution of each of the dependent variables at the group level, as shown below.

```{r show summary model}
summary(out_2st)
```

The resulting model indicates two well-separated states: one where the patient is speaking and another where the therapist is speaking. The looking behavior is quite similar for both the patient and the therapist in these two states. To obtain information on the estimated parameters, you can also use the functions `obtain_gamma` and `obtain_emiss`. These functions not only allow you to inspect the estimated parameters at the group level but also provide individual subject-level information by specifying the input variable `level = "subject"`:

```{r show obtain gamma function}
# When not specified, level defaults to "group"
gamma_pop <- obtain_gamma(out_2st)
gamma_pop
```

```{r, eval=FALSE}
# To obtain the subject specific parameter estimates:
gamma_subj <- obtain_gamma(out_2st, level = "subject")
gamma_subj
```


::: {.callout-note appearance="minimal" collapse="true"}

## See the list of subject-specific parameter estimates: `gamma_subj`

```{r, echo=FALSE}
# To obtain the subject specific parameter estimates:
gamma_subj <- obtain_gamma(out_2st, level = "subject")
gamma_subj
```
:::



::: callout-tip
An additional option provided by the functions `obtain_gamma` and `obtain_emiss` is the ability to change the burn-in period used for obtaining the summary statistics. This can be done by specifying the input argument `burn_in`.
:::
